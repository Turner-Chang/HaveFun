// <auto-generated />
using System;
using HaveFun.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HaveFun.Migrations
{
    [DbContext(typeof(HaveFunDbContext))]
    [Migration("20240612123851_add_userreview_complaintcategory")]
    partial class add_userreview_complaintcategory
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HaveFun.Models.Activity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ActivityTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Amount")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("DeadlineTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("InitiationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("MaxParticipants")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("RegistrationTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Type");

                    b.HasIndex("UserId");

                    b.ToTable("Activities");
                });

            modelBuilder.Entity("HaveFun.Models.ActivityImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ActivityId")
                        .HasColumnType("int");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.ToTable("ActivityImages");
                });

            modelBuilder.Entity("HaveFun.Models.ActivityParticipant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ActivityId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.HasIndex("UserId");

                    b.ToTable("ActivityParticipantes");
                });

            modelBuilder.Entity("HaveFun.Models.ActivityReview", b =>
                {
                    b.Property<int>("ActivityReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ActivityReviewId"));

                    b.Property<int>("ActivityId")
                        .HasColumnType("int");

                    b.Property<int>("ProcessingStstus")
                        .HasColumnType("int");

                    b.Property<int>("ReportItems")
                        .HasColumnType("int");

                    b.Property<string>("ReportReason")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ReportTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ActivityReviewId");

                    b.HasIndex("ActivityId");

                    b.HasIndex("ReportItems");

                    b.HasIndex("UserId");

                    b.ToTable("ActivityReviews");
                });

            modelBuilder.Entity("HaveFun.Models.ActivityType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ActivityTypes");
                });

            modelBuilder.Entity("HaveFun.Models.Announcement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Announcements");
                });

            modelBuilder.Entity("HaveFun.Models.ChatRoom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("MessageText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("User1Id")
                        .HasColumnType("int");

                    b.Property<int>("User2Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("User1Id");

                    b.HasIndex("User2Id");

                    b.ToTable("ChatRooms");
                });

            modelBuilder.Entity("HaveFun.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Contents")
                        .IsRequired()
                        .HasMaxLength(280)
                        .HasColumnType("nvarchar")
                        .HasColumnName("Contents");

                    b.Property<int?>("ParentCommentId")
                        .HasColumnType("int");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParentCommentId");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("HaveFun.Models.ComplaintCategory", b =>
                {
                    b.Property<int>("ComplaintCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ComplaintCategoryId"));

                    b.Property<string>("ComplaintCategoryName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("ComplaintCategoryId");

                    b.ToTable("ComplaintCategories");
                });

            modelBuilder.Entity("HaveFun.Models.Friend", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("FriendListId")
                        .HasColumnType("int");

                    b.Property<int?>("FriendListId1")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FriendListId");

                    b.HasIndex("FriendListId1");

                    b.ToTable("Friend");
                });

            modelBuilder.Entity("HaveFun.Models.FriendList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BeenClicked")
                        .HasColumnType("int");

                    b.Property<int>("Clicked")
                        .HasColumnType("int");

                    b.Property<int>("state")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BeenClicked");

                    b.HasIndex("Clicked");

                    b.ToTable("FriendLists");
                });

            modelBuilder.Entity("HaveFun.Models.Label", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Labels");
                });

            modelBuilder.Entity("HaveFun.Models.LabelCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("LabelCategories");
                });

            modelBuilder.Entity("HaveFun.Models.Like", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Likes");
                });

            modelBuilder.Entity("HaveFun.Models.MemberLabel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("LabelId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LabelId");

                    b.HasIndex("UserId");

                    b.ToTable("MemberLabels");
                });

            modelBuilder.Entity("HaveFun.Models.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Contents")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar")
                        .HasColumnName("Contents");

                    b.Property<string>("Pictures")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("HaveFun.Models.PostReview", b =>
                {
                    b.Property<int>("PostReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PostReviewId"));

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<int>("ProcessingStstus")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ReportItems")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReportTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("PostReviewId");

                    b.HasIndex("PostId");

                    b.HasIndex("ReportItems");

                    b.HasIndex("UserId");

                    b.ToTable("PostReviews");
                });

            modelBuilder.Entity("HaveFun.Models.SwipeHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("SwipeDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("SwipeHistories");
                });

            modelBuilder.Entity("HaveFun.Models.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,4)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("Method")
                        .HasColumnType("int");

                    b.Property<int>("Product")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("HaveFun.Models.UserInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Account")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Account");

                    b.Property<int>("AccountStatus")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Address");

                    b.Property<DateTime>("BirthDay")
                        .HasColumnType("Date")
                        .HasColumnName("BirthDay");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Introduction")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Introduction");

                    b.Property<DateTime?>("LastLoginTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Password");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("PhoneNumber");

                    b.Property<string>("ProfilePicture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("UserInfos");
                });

            modelBuilder.Entity("HaveFun.Models.UserPicture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Picture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserPictures");
                });

            modelBuilder.Entity("HaveFun.Models.UserReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("beReportedUserId")
                        .HasColumnType("int");

                    b.Property<int>("complaintCategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("reportTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("reportUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("beReportedUserId");

                    b.HasIndex("complaintCategoryId");

                    b.HasIndex("reportUserId");

                    b.ToTable("UserReviews");
                });

            modelBuilder.Entity("HaveFun.Models.Activity", b =>
                {
                    b.HasOne("HaveFun.Models.ActivityType", "ActivityType")
                        .WithMany()
                        .HasForeignKey("Type")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HaveFun.Models.UserInfo", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ActivityType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HaveFun.Models.ActivityImage", b =>
                {
                    b.HasOne("HaveFun.Models.Activity", "Activity")
                        .WithMany()
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activity");
                });

            modelBuilder.Entity("HaveFun.Models.ActivityParticipant", b =>
                {
                    b.HasOne("HaveFun.Models.Activity", "Activity")
                        .WithMany("ActivityParticipants")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HaveFun.Models.UserInfo", "User")
                        .WithMany("ActivityParticipants")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Activity");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HaveFun.Models.ActivityReview", b =>
                {
                    b.HasOne("HaveFun.Models.Activity", "ActId")
                        .WithMany("ActivityReviews")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HaveFun.Models.ComplaintCategory", "CategoryId")
                        .WithMany()
                        .HasForeignKey("ReportItems")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HaveFun.Models.UserInfo", "User")
                        .WithMany("ActivityReviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ActId");

                    b.Navigation("CategoryId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HaveFun.Models.ChatRoom", b =>
                {
                    b.HasOne("HaveFun.Models.UserInfo", "Sender")
                        .WithMany("SenderMessages")
                        .HasForeignKey("User1Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HaveFun.Models.UserInfo", "Receiver")
                        .WithMany("ReceiverMessages")
                        .HasForeignKey("User2Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("HaveFun.Models.Comment", b =>
                {
                    b.HasOne("HaveFun.Models.Comment", "ParentComment")
                        .WithMany("Replies")
                        .HasForeignKey("ParentCommentId");

                    b.HasOne("HaveFun.Models.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HaveFun.Models.UserInfo", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ParentComment");

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HaveFun.Models.Friend", b =>
                {
                    b.HasOne("HaveFun.Models.FriendList", null)
                        .WithMany("BlackList")
                        .HasForeignKey("FriendListId");

                    b.HasOne("HaveFun.Models.FriendList", null)
                        .WithMany("Friends")
                        .HasForeignKey("FriendListId1");
                });

            modelBuilder.Entity("HaveFun.Models.FriendList", b =>
                {
                    b.HasOne("HaveFun.Models.UserInfo", "User2")
                        .WithMany("Friends2")
                        .HasForeignKey("BeenClicked")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HaveFun.Models.UserInfo", "User1")
                        .WithMany("Friends1")
                        .HasForeignKey("Clicked")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User1");

                    b.Navigation("User2");
                });

            modelBuilder.Entity("HaveFun.Models.Label", b =>
                {
                    b.HasOne("HaveFun.Models.LabelCategory", "LabelCategory")
                        .WithMany("Labels")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LabelCategory");
                });

            modelBuilder.Entity("HaveFun.Models.Like", b =>
                {
                    b.HasOne("HaveFun.Models.Post", "Post")
                        .WithMany("Like")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HaveFun.Models.UserInfo", "User")
                        .WithMany("Likes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HaveFun.Models.MemberLabel", b =>
                {
                    b.HasOne("HaveFun.Models.Label", "Label")
                        .WithMany("MemberLabels")
                        .HasForeignKey("LabelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HaveFun.Models.UserInfo", "UserInfo")
                        .WithMany("MemberLabels")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Label");

                    b.Navigation("UserInfo");
                });

            modelBuilder.Entity("HaveFun.Models.Post", b =>
                {
                    b.HasOne("HaveFun.Models.UserInfo", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("HaveFun.Models.PostReview", b =>
                {
                    b.HasOne("HaveFun.Models.Post", "Post")
                        .WithMany()
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HaveFun.Models.ComplaintCategory", "CategoryId")
                        .WithMany()
                        .HasForeignKey("ReportItems")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HaveFun.Models.UserInfo", "User")
                        .WithMany("PostReviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CategoryId");

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HaveFun.Models.SwipeHistory", b =>
                {
                    b.HasOne("HaveFun.Models.UserInfo", "UserInfo")
                        .WithMany("SwipeHistories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserInfo");
                });

            modelBuilder.Entity("HaveFun.Models.Transaction", b =>
                {
                    b.HasOne("HaveFun.Models.UserInfo", "UserInfo")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserInfo");
                });

            modelBuilder.Entity("HaveFun.Models.UserPicture", b =>
                {
                    b.HasOne("HaveFun.Models.UserInfo", "UserInfo")
                        .WithMany("Pictures")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserInfo");
                });

            modelBuilder.Entity("HaveFun.Models.UserReview", b =>
                {
                    b.HasOne("HaveFun.Models.UserInfo", "User2")
                        .WithMany("BeRepostedUsers")
                        .HasForeignKey("beReportedUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HaveFun.Models.ComplaintCategory", "ComplaintCategory")
                        .WithMany("UserReviews")
                        .HasForeignKey("complaintCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HaveFun.Models.UserInfo", "User1")
                        .WithMany("ReportUsers")
                        .HasForeignKey("reportUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ComplaintCategory");

                    b.Navigation("User1");

                    b.Navigation("User2");
                });

            modelBuilder.Entity("HaveFun.Models.Activity", b =>
                {
                    b.Navigation("ActivityParticipants");

                    b.Navigation("ActivityReviews");
                });

            modelBuilder.Entity("HaveFun.Models.Comment", b =>
                {
                    b.Navigation("Replies");
                });

            modelBuilder.Entity("HaveFun.Models.ComplaintCategory", b =>
                {
                    b.Navigation("UserReviews");
                });

            modelBuilder.Entity("HaveFun.Models.FriendList", b =>
                {
                    b.Navigation("BlackList");

                    b.Navigation("Friends");
                });

            modelBuilder.Entity("HaveFun.Models.Label", b =>
                {
                    b.Navigation("MemberLabels");
                });

            modelBuilder.Entity("HaveFun.Models.LabelCategory", b =>
                {
                    b.Navigation("Labels");
                });

            modelBuilder.Entity("HaveFun.Models.Post", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Like");
                });

            modelBuilder.Entity("HaveFun.Models.UserInfo", b =>
                {
                    b.Navigation("ActivityParticipants");

                    b.Navigation("ActivityReviews");

                    b.Navigation("BeRepostedUsers");

                    b.Navigation("Comments");

                    b.Navigation("Friends1");

                    b.Navigation("Friends2");

                    b.Navigation("Likes");

                    b.Navigation("MemberLabels");

                    b.Navigation("Pictures");

                    b.Navigation("PostReviews");

                    b.Navigation("ReceiverMessages");

                    b.Navigation("ReportUsers");

                    b.Navigation("SenderMessages");

                    b.Navigation("SwipeHistories");
                });
#pragma warning restore 612, 618
        }
    }
}
