<div id="PostCheckApp">

	<div class="container row   p-5 text-center border-2 m-auto">
		<h1>檢舉個人貼文管理</h1>
		<hr />
		<div class="col-12">
			<span class="col-12 col-md-2  m-2 ">處理狀態示意顏色: </span>
			<label class=" text-bg-warning  col-12 col-md-2  m-2">申訴中</label>
			<label class="text-bg-secondary col-12 col-md-2  m-2">已封鎖</label>
			<label class="text-bg-success col-12 col-md-2  m-2">無須封鎖</label>
		</div>

		<div class="m-2 col-12  ">
			<label class="m-2">檢舉項目有哪些:</label> <br />
			<label v-for="c in complaint" style="background-color: cornsilk;" class="form-label col-12 col-md-2 col-sm-6 border border-secondary ">{{c.complaintCategoryId}} . {{c.complaintCategoryName}}</label>
		</div>

		<hr />
		<div class="table-responsive-md" v-if="reports.length>0">
			<table class="table table-secondary">
				<thead class="table-active">
					<tr>
						<th scope="col">被檢舉貼文Id</th>
						<th scope="col">被檢舉人Id</th>
						<th scope="col">被檢舉項目</th>
						<th scope="col">被檢舉理由</th>
						<th scope="col">被檢舉時間</th>
						<th scope="col">處理按鈕</th>

					</tr>
				</thead>
				<tbody>
					<tr v-for="r in reports.slice(tableStart,tableEnd)" class="">
						<td>{{r.postId}}</td>
						<td>{{r.userId}}</td>
						<td>{{this.ComplaintToString(r.reportItems)}}</td>
						<td>{{r.reason}}</td>
						<td class="col-md-0">{{this.TimeSplit(r.reportTime)}}</td>
						<td>
							<button :id="r.postReviewId" class="btn " :class="btnColor(r.processingStstus)"
									@@click="check(r.postId,r.postReviewId)">
								{{this.ReviewStatusToString(r.processingStstus)}}
							</button>
						</td>

					</tr>
				</tbody>
			</table>

		</div>
		<div v-if="reports.length>0">
			<button class="btn btn-secondary m-3" @@click="UpperFive()">上五筆</button>
			<button class="btn btn-secondary m-3" @@click="LowerFive()">下五筆</button>
		</div>

		<template v-if="reports.length==0"><h1>沒有被檢舉資料</h1> </template>

		
	</div>


	<div class="modal fade"
		 id="PostModal"
		 tabindex="-1"
		 data-bs-backdrop="static"
		 data-bs-keyboard="false"
		 role="dialog"
		 aria-labelledby="modalTitleId"
		 aria-hidden="true">
		<div class="modal-dialog modal-dialog-scrollable modal-dialog-centered modal-sm"
			 role="document">
			<div class="modal-content">
				<div class="modal-header " style="background-color:coral;">
					<span style="width:150px;"></span>
					<h5 class="modal-title " id="modalTitleId">
						檢舉貼文
					</h5>
					<button type="button"
							class="btn-close"
							data-bs-dismiss="modal"
							aria-label="Close">
					</button>
				</div>
				<div class="modal-body row lh-lg">
					<div>
						<label class="col-6 text-decoration-underline">
							被檢舉貼文Id:
						</label>
						<label class="col-6 text-start">
							{{Post.id}}
						</label>
					</div>
					<div>
						<label class="col-6 text-decoration-underline">
							被檢舉貼文內容:
						</label>
						<label class="col-12 text-center lh-base">
							{{Post.contents}}
						</label>
					</div>
					<div>
						<label class="col-6 text-decoration-underline">
							被檢舉圖片:
						</label>
						<img class="col-12 img-fluid" :src="imgSrc" />

					</div>
					<div>
						<label class="col-6 text-decoration-underline">
							檢舉狀態:
						</label>
						<label class="col-6 text-start">
							{{this.PostStatusToString(Post.status)}}
						</label>

					</div>
				</div>
				<div class="modal-footer">
					@* <button type="button" class="btn btn-warning" @@click="reportUser">檢舉使用者</button> *@
					<button type="button"
							class="btn btn-secondary "
							data-bs-dismiss="modal"
							@@click="PostStateChange(PostId,0) ">
						駁回檢舉
					</button>
					<button type="button"
							class="btn btn-danger"
							@@click="PostStateChange(PostId,1)">
						刪除貼文
					</button>
				</div>
			</div>
		</div>
	</div>
</div>
@* // *@
@section Scripts {

	<script>
		var App = Vue.createApp({
			data() {
				return {
					reports: [],
					Post: {},
					PostReviewId: 0,
					PostId: 0,
					tableStart: 0,
					tableEnd: 5,
					complaint: [],
					baseAdress: "",
					imgSrc: "",
				}
			},
			methods: {
				GetAll() {

					var data = fetch(`${this.baseAdress}/api/PostReview/GetAll`, { method: "GET" })
						.then(response => response.json())
						.then(data =>
							JSON.stringify(data))
						.then(d => {
							App.reports = JSON.parse(d).reverse();

						})
						.catch(error => {
							console.error('發生錯誤:', error);
							alert("錯誤");
						});
				}
				,
				check(postId, postReviewId) {
					this.showModal();
					this.GetPost(postId);
					this.PostReviewId = postReviewId;
					this.PostId = postId;
					//alert(postReviewId)
				},
				showModal() {
					$("#PostModal").modal("show");
				}
				,
				hideModal() {
					this.Post = {};
					$("#PostModal").modal("hide");

				}
				,
				GetPost(PostId) {


					var data = fetch(`${this.baseAdress}/api/Post/GetById/${PostId}`, { method: "GET" })
						.then(response => response.json())
						.then(data =>
							JSON.stringify(data))
						.then(d => {
							App.Post = JSON.parse(d);
							console.log(App.Post);
							if (!App.Post.pictures) {
								this.imgSrc = "/images/NOimg.jpg";
							}
							else { this.getpicture(PostId); }
						}
						)
						.catch(error => {
							console.error('發生錯誤:', error);
							alert("錯誤");
						});



				},
				PostReviewStateChange(postReviewId, state) {
					var body = {
						"postReviewId": postReviewId,
						"userId": 0,
						"postId": 0,
						"reportItems": 0,
						"reason": "string",
						"reportTime": "2024-06-11T09:48:38.026Z",
						"processingStstus": state
					};
					fetch(
						`${this.baseAdress}/api/PostReview/Put/${postReviewId}`,
						{
							method: "PUT",
							body: JSON.stringify(body),
							headers: { 'Content-Type': 'application/json' }
						}
					).then(res => res.text())
						.then(data => console.log(data))
						.then(d => App.GetAll())
						.catch(err => alert("err"));
					this.hideModal();


				},
				PostStateChange(PostId, state) {
					var body = {
						"id": PostId,
						"status": state
					};
					fetch(
						`${this.baseAdress}/api/Post/PutState?id=${PostId}`,
						{
							method: "PUT",
							body: JSON.stringify(body),
							headers: { 'Content-Type': 'application/json' }
						}
					).then(res => res.text())
						.then(data => console.log(data))
						.catch(err => alert("err"));
					if (state == 0) { state = 2; }
					this.PostReviewStateChange(this.PostReviewId, state);

				},
				btnColor(id) {
					if (id == 0) { return "btn-warning"; }
					if (id == 1) { return "btn-secondary "; }
					if (id == 2) { return "btn-success"; }

				},
				UpperFive() {
					if (this.tableStart > 0) {
						this.tableStart -= 5;
						this.tableEnd -= 5;
					}
					else {
						//alert("已經是第一頁")
					}
				},
				LowerFive() {
					if (this.tableEnd < this.reports.length) {
						this.tableStart += 5;
						this.tableEnd += 5;
					}
					else {
						//alert("已經是最後一頁")
					}
				},
				ReviewStatusToString(s) {
					if (s == 0) { return "申訴中"; }
					else if (s == 1) { return "已封鎖"; }
					else { return "無須封鎖"; }
				},
				PostStatusToString(s) {
					if (s == 0) { return "未下架貼文"; }
					else { return "已下架貼文"; }
				},
				ComplaintToString(id) {
					if (this.complaint.length != 0)
						return this.complaint[parseInt(id) - 1].complaintCategoryName
					else
						return "null";
				},
				TimeSplit(timeStr) {
					if (timeStr != null) {
						var timeArr = timeStr.split('T').join('-').split('-').join(':').split(":");
						return `${timeArr[0]}年 ${timeArr[1]}月 ${timeArr[2]}日 ${timeArr[3]}時 ${timeArr[4]}分`;
					}
				},
			// 	reportUser(UserId) {
			// 		var body = {
			// 						{
			// 			"id": 0,
			// 			"reportTime": Date().now,
			// 			"complaintCategoryId": 1,
				// 			"reportUserId": UserId,
			// 			"beReportedUserId": 0
			// 		}
			// 	};
			// 	fetch(`/api/userReview/Create`,
			// 		{
			// 			method: "POST",
			// 			body: JSON.stringify(body),
			// 	headers: { 'Content-Type': 'application/json' }
			// })
			// 			},
				getpicture(PostId) {
					this.imgSrc = "/api/Profile/GetPostPicture/" + PostId;
				
				},


					},
		mounted: async () => {

				var baseAdress = ""; /* https://localhost:7152 */

			var resp = await fetch(
				`${baseAdress}/api/PostReview/GetAll`, {
				method: "GET"
			});
			var data = await resp.json();
			App.reports = data.reverse();
			//alert(JSON.stringify(data));

			fetch(`${baseAdress}/api/complaint/Getall`, { method: "GET" }).then(r => r.json()).then(d => App.complaint = d);
			//

		},
				}).mount("#PostCheckApp");

	</script>
}