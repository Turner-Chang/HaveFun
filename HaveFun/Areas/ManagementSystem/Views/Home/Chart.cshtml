<div class="container" id="ChartApp">
	<h2 class="text-center">圖表分析</h2>
	總人數 : {{countUser}}

	<br />
	<button class="btn btn-success m-3" @@click="changeStyle()">圓餅/長條切換</button>
	<div class="row">
		<div class="col-4">


			<div class="card m-4" style="width:300px;height:300px;">
				<div class="card-header">
					<i class="fas fa-chart-area me-1"></i>
					<span class="ps-4">
						使用者男女比  {{fixed(countMale/countFeMale)}} :  1
					</span>
				</div>
				<div class="card-body" style="width:300px;height:250px;">
					<canvas id="GenderChart"></canvas>
				</div>

			</div>

		</div>
		<div class="col-4">


			<div class="card m-4" style="width:300px;height:300px;">
				<div class="card-header">
					<i class="fas fa-chart-area me-1"></i>
					<span class="ps-4">
						付費比 : {{countMoneyLevel/(countUser)*100}}%
					</span>
				</div>
				<div class="card-body" style="width:300px;height:250px;">
					<canvas id="LevelChart"></canvas>
				</div>

			</div>

		</div>
		<div class="col-4">


			<div class="card m-4" style="width:300px;height:300px;">
				<div class="card-header">
					<i class="fas fa-chart-area me-1"></i>
					<span class="ps-4">
						年齡分佈
					</span>
				</div>
				<div class="card-body" style="width:300px;height:250px;">
					<canvas id="AgeRangeChart"></canvas>
				</div>

			</div>

		</div>
	</div>

</div>

@section Scripts {


	<script src="https://cdnjs.cloudflare.com/ajax/libs/axios/1.7.2/axios.min.js" integrity="sha512-JSCFHhKDilTRRXe9ak/FJ28dcpOJxzQaCd3Xg8MyF6XFjODhy/YMCM8HW0TFDckNHWUewW+kfvhin43hKtJxAw==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
	<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
	<script>
		const ChartApp = Vue.createApp({
			data() {
				return {
					UserArr: [],
					NoBlockUserArr: [],
					chartType: 'bar',
					ageArr: [],
					ageRangeArr: [],
				}
			},
			computed: {
				filterStatus() {
					this.NoBlockUserArr = this.UserArr.filter(i => i.status == 0);
				},
				countUser() {
					return this.NoBlockUserArr.length;
				},
				countMale() {
					return this.NoBlockUserArr.filter(i => i.gender == 0).length;
				},

				countFeMale() {
					return this.NoBlockUserArr.filter(i => i.gender == 1).length;
				}, untMaleFemalePercent() {
					return (this.countMale / (this.countUser - this.countMale)).toFixed(2);
				},
				countMoneyLevel() {
					return this.NoBlockUserArr.filter(i => i.level == 1).length;
				},

			},
			methods: {
				DrawGenderChart() {
					$('#GenderChart').replaceWith($('<canvas id="GenderChart" ></canvas>'));
					const chartElement = document.getElementById('GenderChart');
					new Chart(chartElement, {
						type: this.chartType,
						data: {
							labels: [
								'男生',
								'女生',
							],
							datasets: [{
								label: '人數',
								data: [this.countMale, this.countFeMale],
							}]
						},
						options: {
							scale: {
								ticks: {
									precision: 0
								}
							},
						}

					});
				},

				DrawLevelChart() {
					$('#LevelChart').replaceWith($('<canvas id="LevelChart" ></canvas>'));

					const chartElement = document.getElementById('LevelChart');
					new Chart(chartElement, {
						type: this.chartType,
						data: {
							labels: [
								'免費',
								'付費',
							],
							datasets: [{
								label: '人數',
								data: [this.countUser - this.countMoneyLevel, this.countMoneyLevel],
							}]
						},
						options: {
							scale: {
								ticks: {
									precision: 0
								}
							}
						}
					});
				},
				DrawAgeRangeChart() {
					ChartApp.Age();
					$('#AgeRangeChart').replaceWith($('<canvas id="AgeRangeChart" ></canvas>'));
					const chartElement = document.getElementById('AgeRangeChart');
					new Chart(chartElement, {
						type: this.chartType,
						data: {
							labels: ['0-10', '10-20', '20-30', '30-40', '40-50', '50-60', '60-70', '70up']
							,
							datasets: [{
								label: '人數',
								data: this.ageRangeArr,
							}]

						},
						options: {
							scale: {
								ticks: {
									precision: 0
								}
							}
						}
					});
				},

				changeStyle(id) {
					if (this.chartType == 'bar') {
						this.chartType = 'pie';
					}
					else {
						this.chartType = 'bar';
					}
					this.DrawGenderChart();
					this.DrawLevelChart();
					this.DrawAgeRangeChart();

				},
				Age() {
					this.NoBlockUserArr.forEach((i, index) => {
						var age = Math.floor((new Date - new Date(i.birthDay)) / (1000 * 60 * 60 * 24 * 365.25))
						this.ageArr[index] = age;
					});
					this.ageArr = this.ageArr.map(age => Math.floor(age / 10));
					this.ageRangeArr = [
						this.ageArr.filter(age => age == 0).length,
						this.ageArr.filter(age => age == 1).length,
						this.ageArr.filter(age => age == 2).length,
						this.ageArr.filter(age => age == 3).length,
						this.ageArr.filter(age => age == 4).length,
						this.ageArr.filter(age => age == 5).length,
						this.ageArr.filter(age => age == 6).length,
						this.ageArr.filter(age => age == 7).length,
						this.ageArr.filter(age => age > 7).length,

					]
				},
				fixed(num) {
					return num.toFixed(2);
				}
				,
			},

			mounted() {

				axios.get('/api/UserInfo/GetAll').then(d => d.data).then(d => ChartApp.UserArr = d)
					.then(d => ChartApp.filterStatus)
					.then(d => ChartApp.DrawGenderChart())
					.then(d => ChartApp.DrawLevelChart())
					.then(d => ChartApp.DrawAgeRangeChart())


			},
		}).mount("#ChartApp");
	</script>
}