<div id="app_TagManage" class="container">
    <h1 class="my-4">標籤和標籤種類管理</h1>

    <!-- 標籤查詢 -->
    <div class="mb-3">
        <label for="label-query" class="form-label">查詢標籤</label>
        <input type="text" id="label-query" v-model="labelQuery" class="form-control" placeholder="輸入標籤名稱">
    </div>

    <!-- 標籤顯示 -->
    <div class="table-responsive">
        <h2>標籤</h2>
        <table class="table table-bordered">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>名稱</th>
                    <th>種類</th>
                    <th>操作</th>
                </tr>
            </thead>
            <tbody>
                <tr v-for="label in paginatedLabels" :key="label.id">
                    <td>{{ label.id }}</td>
                    <td>{{ label.name }}</td>
                    <td>{{ getLabelCategoryName(label.categoryId) }}</td>
                    <td>
                        <button class="btn btn-danger" @@click="deleteLabel(label.id)">刪除</button>
                    </td>
                </tr>
            </tbody>
        </table>

        <!-- 分頁按鈕 -->
        <nav aria-label="標籤分頁">
            <ul class="pagination">
                <li class="page-item" :class="{ disabled: currentLabelPage === 1 }">
                    <button class="page-link" @@click="previousLabelPage" aria-label="上一頁">
                        <span aria-hidden="true">&laquo; 上一頁</span>
                    </button>
                </li>
                <li class="page-item" :class="{ disabled: currentLabelPage === totalLabelPages }">
                    <button class="page-link" @@click="nextLabelPage" aria-label="下一頁">
                        <span aria-hidden="true">下一頁 &raquo;</span>
                    </button>
                </li>
            </ul>
        </nav>

        <!-- 新增標籤按鈕 -->
        <button class="btn btn-success mt-3" @@click="showLabelForm">新增標籤</button>
    </div>

    <!-- 標籤種類查詢 -->
    <div class="mb-3">
        <label for="category-query" class="form-label">查詢標籤種類</label>
        <input type="text" id="category-query" v-model="categoryQuery" class="form-control" placeholder="輸入標籤種類名稱">
    </div>

    <!-- 標籤種類顯示 -->
    <div class="table-responsive">
        <h2>標籤種類</h2>
        <table class="table table-bordered">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>名稱</th>
                    <th>操作</th>
                </tr>
            </thead>
            <tbody>
                <tr v-for="category in paginatedCategories" :key="category.id">
                    <td>{{ category.id }}</td>
                    <td>{{ category.name }}</td>
                    <td>
                        <button class="btn btn-danger" @@click="deleteCategory(category.id)">刪除</button>
                    </td>
                </tr>
            </tbody>
        </table>

        <!-- 分頁按鈕 -->
        <nav aria-label="標籤種類分頁">
            <ul class="pagination">
                <li class="page-item" :class="{ disabled: currentCategoryPage === 1 }">
                    <button class="page-link" @@click="previousCategoryPage" aria-label="上一頁">
                        <span aria-hidden="true">&laquo; 上一頁</span>
                    </button>
                </li>
                <li class="page-item" :class="{ disabled: currentCategoryPage === totalCategoryPages }">
                    <button class="page-link" @@click="nextCategoryPage" aria-label="下一頁">
                        <span aria-hidden="true">下一頁 &raquo;</span>
                    </button>
                </li>
            </ul>
        </nav>

        <!-- 新增標籤種類按鈕 -->
        <button class="btn btn-success mt-3" @@click="showCategoryForm">新增標籤種類</button>
    </div>

    <!-- 新增標籤表單 -->
    <div v-if="showLabelModal" class="modal show d-block" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h2>新增標籤</h2>
                    <button type="button" class="btn-close" @@click="hideLabelForm"></button>
                </div>
                <div class="modal-body">
                    <div>
                        <div class="mb-3">
                            <label for="label-name" class="form-label">名稱</label>
                            <input type="text" id="label-name" v-model="labelForm.name" class="form-control" required />
                        </div>
                        <div class="mb-3">
                            <label for="label-category" class="form-label">種類</label>
                            <select id="label-category" v-model="labelForm.categoryId" class="form-control" required>
                                <option v-for="category in categories" :value="category.id">{{ category.name }}</option>
                            </select>
                        </div>
                        <div v-if="errorMessage" class="alert alert-danger">{{ errorMessage }}</div>
                        <button type="submit" class="btn btn-success" @@click="submitLabelForm">新增</button>
                        <button type="button" class="btn btn-secondary" @@click="hideLabelForm">取消</button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- 新增標籤種類表單 -->
    <div v-if="showCategoryModal" class="modal show d-block" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h2>新增標籤種類</h2>
                    <button type="button" class="btn-close" @@click="hideCategoryForm"></button>
                </div>
                <div class="modal-body">
                    <div>
                        <div class="mb-3">
                            <label for="category-name" class="form-label">種類名稱</label>
                            <input type="text" id="category-name" v-model="categoryForm.name" class="form-control" required />
                        </div>
                        <div v-if="errorMessage" class="alert alert-danger">{{ errorMessage }}</div>
                        <button type="submit" class="btn btn-success" @@click="submitCategoryForm">新增</button>
                        <button type="button" class="btn btn-secondary" @@click="hideCategoryForm">取消</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>



<script src="https://cdnjs.cloudflare.com/ajax/libs/axios/1.7.2/axios.min.js" integrity="sha512-JSCFHhKDilTRRXe9ak/FJ28dcpOJxzQaCd3Xg8MyF6XFjODhy/YMCM8HW0TFDckNHWUewW+kfvhin43hKtJxAw==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
<script src="https://unpkg.com/vue@3.4.27/dist/vue.global.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.all.min.js"></script>

<script>
    const app_TagManage = Vue.createApp({
        data() {
            return {
                labels: [],
                categories: [],
                labelForm: {
                    name: '',
                    categoryId: ''
                },
                categoryForm: {
                    name: ''
                },
                labelQuery: '',
                categoryQuery: '',
                showLabelModal: false,
                showCategoryModal: false,
                currentLabelPage: 1,
                currentCategoryPage: 1,
                itemsPerPage: 10,
                errorMessage: '', //儲存錯誤訊息
            };
        },
        computed: {
            filteredLabels() {
                return this.labels.filter(label =>
                    label.name.toLowerCase().includes(this.labelQuery.toLowerCase())
                );
            },
            filteredCategories() {
                return this.categories.filter(category =>
                    category.name.toLowerCase().includes(this.categoryQuery.toLowerCase())
                );
            },
            paginatedLabels() {
                const start = (this.currentLabelPage - 1) * this.itemsPerPage;
                const end = start + this.itemsPerPage;
                return this.filteredLabels.slice(start, end);
            },
            paginatedCategories() {
                const start = (this.currentCategoryPage - 1) * this.itemsPerPage;
                const end = start + this.itemsPerPage;
                return this.filteredCategories.slice(start, end);
            },
            totalLabelPages() {
                return Math.ceil(this.filteredLabels.length / this.itemsPerPage);
            },
            totalCategoryPages() {
                return Math.ceil(this.filteredCategories.length / this.itemsPerPage);
            }
        },
        methods: {
            getLabelCategoryName(categoryId) {
                const category = this.categories.find(c => c.id === categoryId);
                return category ? category.name : '未知';
            },
            showLabelForm() {
                this.resetLabelForm();
                this.showLabelModal = true;
            },
            hideLabelForm() {
                this.showLabelModal = false;
            },
            deleteLabel(id) {
                if (!confirm("確定要刪除此標籤嗎？")) return;
                axios.delete(`/api/LabelsManageApi/${id}`)
                    .then(() => {
                        this.labels = this.labels.filter(label => label.id !== id);
                        Swal.fire({
                            icon: 'success',
                            title: '刪除標籤成功',
                            showConfirmButton: true
                        });
                    })
                    .catch(error => {
                        console.error("刪除標籤時發生錯誤:", error);
                    });
            },
            submitLabelForm() {
                this.errorMessage = '';
                axios.post(`/api/LabelsManageApi`, this.labelForm)
                    .then(response => {
                        this.labels.push(response.data);
                        this.hideLabelForm();
                        Swal.fire({
                            icon: 'success',
                            title: '新增標籤成功',
                            showConfirmButton: true
                        });
                    })
                    .catch(error => {
                        if (error.response && error.response.status === 409) {
                            this.errorMessage = error.response.data.message;
                        } else {
                            console.error('新增標籤時發生錯誤', error);
                        }
                    });
            },
            resetLabelForm() {
                this.labelForm = { name: '', categoryId: '' };
            },
            showCategoryForm() {
                this.resetCategoryForm();
                this.showCategoryModal = true;
            },
            hideCategoryForm() {
                this.showCategoryModal = false;
            },
            deleteCategory(id) {
                if (!confirm("確定要刪除此標籤種類嗎？")) return;
                axios.delete(`/api/LabelCategoriesManageApi/${id}`)
                    .then(() => {
                        this.categories = this.categories.filter(category => category.id !== id);
                        this.labels = this.labels.filter(label => label.categoryId !== id);
                        Swal.fire({
                            icon: 'success',
                            title: '刪除標籤種類成功',
                            showConfirmButton: true
                        });
                    })
                    .catch(error => {
                        console.error("刪除標籤種類時發生錯誤:", error);
                    });
            },
            submitCategoryForm() {
                this.errorMessage = '';
                axios.post(`/api/LabelCategoriesManageApi`, this.categoryForm)
                    .then(response => {
                        this.categories.push(response.data);
                        this.hideCategoryForm();
                        Swal.fire({
                            icon: 'success',
                            title: '新增標籤種類成功',
                            showConfirmButton: true
                        });
                    })
                    .catch(error => {
                        if (error.response && error.response.status === 409) {
                            this.errorMessage = error.response.data.message;
                        } else { console.error("新增標籤種類時發生錯誤:", error); }                        
                    });
            },
            resetCategoryForm() {
                this.categoryForm = { name: '' };
            },
            nextLabelPage() {
                if (this.currentLabelPage < this.totalLabelPages) {
                    this.currentLabelPage++;
                }
            },
            previousLabelPage() {
                if (this.currentLabelPage > 1) {
                    this.currentLabelPage--;
                }
            },
            nextCategoryPage() {
                if (this.currentCategoryPage < this.totalCategoryPages) {
                    this.currentCategoryPage++;
                }
            },
            previousCategoryPage() {
                if (this.currentCategoryPage > 1) {
                    this.currentCategoryPage--;
                }
            }
        },
        mounted() {
            axios.get(`/api/labelsManageApi`)
                .then(response => {
                    this.labels = response.data;
                })
                .catch(error => {
                    console.error("加載標籤數據時發生錯誤:", error);
                });
            axios.get(`/api/labelCategoriesManageApi`)
                .then(response => {
                    this.categories = response.data;
                })
                .catch(error => {
                    console.error("加載標籤種類數據時發生錯誤:", error);
                });
        }
    }).mount("#app_TagManage");
</script>

