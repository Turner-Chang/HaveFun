<div class="tab-pane fade" id="gt2" role="tabpanel" aria-labelledby="gt2-tab">
	<div class="info">
		<div id="app_UserInfo">
			<div class="info-card mb-4">
				@* 基本資料 *@
				<div class="info-card-title">
					<h6>基本資料</h6>
				</div>
				<div class="info-card-content">
					<ul class="info-list">
						<li>
							<p class="info-name">大頭貼</p>
							<img :src="profilePictureUri" alt="Profile Picture" />
						</li>
						<li>
							<p class="info-name">姓名</p>
							<p class="info-details">{{ material.name }}</p>
						</li>
						<li>
							<p class="info-name">性別</p>
							<p class="info-details">{{ displayGender }}</p>
						</li>
						<li>
							<p class="info-name">生日</p>
							<p class="info-details">{{ material.birthDay }}</p>
						</li>
						<li>
							<p class="info-name">會員等級</p>
							<p class="info-details">{{ displayLevel }}</p>
						</li>
						<li>
							<p class="info-name">電話</p>
							<p class="info-details">{{ material.phoneNumber }}</p>
						</li>
						<li>
							<p class="info-name">所在地</p>
							<p class="info-details">{{ material.address }}</p>
						</li>
					</ul>
				</div>
			</div>

			<div class="info-card mb-4">
				@* 自我介紹 *@
				<div class="info-card-title">
					<h6>了解更多:</h6>
				</div>
				<div class="info-card-content">
					<span>{{ material.introduction }}</span>
				</div>
			</div>

			<button type="button" class="default-btn" v-on:click="showModel">編輯個人資料</button>  @* 編輯基本資料.自我介紹.找朋友的按鈕 *@



			<div class="modal fade" id="saveModal" tabindex="-1" data-bs-backdrop="static" data-bs-keyboard="false" @* 編輯個人資料表單 *@
				 role="dialog" aria-labelledby="modalTitleId" aria-hidden="true">
				<div class="modal-dialog modal-dialog-scrollable modal-dialog-centered modal-md" role="document">
					<div class="modal-content">
						<div class="modal-header">
							<h5 class="modal-title" id="modalTitleId">編輯個人資料</h5>
							<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
						</div>
						<div class="modal-body" style="width: auto;height: 400px;">
							<label form-label>暱稱:</label>
							<div style="border-style:groove"><input v-model="material.name" placeholder="請輸入暱稱" /></div>
							<div><span v-if="customErrors.name" class="error">{{ customErrors.name }}</span></div>
							<label form-label>生日:</label>
							<div style="border-style:groove"><input v-model="material.birthDay" placeholder="請輸入生日" /></div>
							<div><span v-if="customErrors.birthDay" class="error">{{ customErrors.birthDay }}</span></div>
							<label form-label>所在地: </label>
							<div style="border-style:groove"><input v-model="material.address" placeholder="請輸入所在地" /></div>
							<label form-label>電話:</label>
							<div style="border-style:groove"><input v-model="material.phoneNumber" placeholder="請輸入您的電話號碼" /></div>
							<div><span v-if="customErrors.phoneNumber" class="error">{{ customErrors.phoneNumber }}</span></div>
							<label form-label>自我介紹:</label>
							<textarea v-model="material.introduction" placeholder="請開始介紹自己"></textarea>
							<div class="form-group">
								<label>大頭貼</label>
								<input type="file" class="form-control" v-model="profilePicture" @@change="isImage" accept="image/*">
								<div class="text-danger">{{ profilePictureError }}</div>
								<img :src="imagePreview" class="imgPreview img-thumbnail" />
							</div>
						</div>
						<div class="modal-footer">
							<button id="btnInsert" type="button" class="btn btn-primary" @@click="saveData">確定</button>
							<button type="button" class="btn btn-primary" data-bs-dismiss="modal" @@click="cancelChange">取消</button>
						</div>
					</div>
				</div>
			</div>

			<div class="shop-page padding-bottom aside-bg">
				<div class="container pt-4 pb-4" style="background-color:white;">
					<h5>
						個人相簿
					</h5>
					<div class="row justify-content-center pb-15">
						<div class="col-12">
							<article>
								<div class="shop-product-wrap grid row justify-content-left g-4">
									<div class="col-lg-4 col-md-6 col-12" v-for="pic in pictures" :key="pic.id">
										<div class="product-item">
											<div class="product-thumb" @* style="width: 100%; height: 200px; overflow: hidden; display: flex; align-items: center; justify-content: center;" *@>
												<div class="pro-thumb" @* style="width: 100%; height: 100%;" *@>
													<img :src="pic.picture" alt="圖片" @* style="width: 100%; height: 100%; object-fit: cover;" *@>
												</div>
												<div class="product-action-link">
													<a class="view-modal" @@click="deletePicture(pic.id)">
														<i class="fa-solid fa-x"></i>
													</a>
												</div>
											</div>
										</div>
									</div>
								</div>
							</article>
						</div>
						<div class="col-12 pt-2">
							<input type="file" id="file-upload" style="display: none;" multiple @@change="uploadPictures" accept="image/*" >
							<label for="file-upload" class="default-btn" style="cursor: pointer;">上傳</label>
						</div>
					</div>

				</div>
			</div>

		</div>

		<div id="app_MemberLable">
			<div class="info-card mb-4">
				<div v-if="selectedLabels.length > 0" class="info-card-title">
					<h6>您的標籤：</h6>
					<div class="selected-labels">
						<span v-for="labelId in selectedLabels"
							  :key="labelId"
							  class="label-item selected">
							{{ getLabelById(labelId).name }}
						</span>
					</div>
				</div>
				<div v-if="errorMessage" class="error-message">
					<p>{{ errorMessage }}</p>
				</div>
				<button type="button" class="default-btn" @@click="submitLabels">保存選擇</button>
				<button type="button" class="default-btn" @@click="clearSelection">重新選擇</button>
				<div v-else class="info-card-title">
					<h6>標籤選取</h6>
					<div class="info-card-content">
						<div v-for="label in availableLabels" :key="label.id" class="label-item"
							 :class="{ 'selected': selectedLabels.includes(label.id) }"
							 @@click="toggleLabel(label.id)">
							{{ label.name }}
						</div>
					</div>
				</div>
			</div>

		</div>
	</div>
</div>

<style>
	/* 標籤的基本樣式 */
	.label-item {
		padding: 10px;
		border: 1px solid #ddd;
		border-radius: 5px;
		margin: 5px;
		display: inline-block;
		cursor: pointer;
		transition: background-color 0.3s, color 0.3s, border-color 0.3s;
	}

		/* 選中標籤的樣式 */
		.label-item.selected {
			background-color: #007bff;
			color: #fff;
			border-color: #007bff;
		}

	/* 以選擇的標籤容器 */
	.selected-labels {
		display: flex;
		flex-wrap: wrap;
		gap: 5px;
		margin-bottom: 10px;
	}

	/* 卡片樣式 */
	.info-card {
		border: 1px solid #ddd;
		border-radius: 5px;
		padding: 20px;
		margin-bottom: 20px;
		background-color: #f9f9f9;
	}

	/* 卡片標題樣式 */
	.info-card-title {
		margin-bottom: 15px;
	}

	/* 卡片內容樣式 */
	.info-card-content {
		display: flex;
		flex-wrap: wrap;
		gap: 5px;
	}

	/* 按鈕樣式 */
	.default-btn {
		margin-top: 10px;
		margin-right: 5px;
		padding: 10px 20px;
		border: none;
		border-radius: 5px;
		background-color: #007bff;
		color: white;
		cursor: pointer;
		transition: background-color 0.3s, color 0.3s;
	}

		.default-btn:hover {
			background-color: #0056b3;
		}

	/* 錯誤訊息樣式 */
	.error {
		color: red;
		font-size: 0.9em;
	}

</style>


<script src="https://cdnjs.cloudflare.com/ajax/libs/axios/1.7.2/axios.min.js" integrity="sha512-JSCFHhKDilTRRXe9ak/FJ28dcpOJxzQaCd3Xg8MyF6XFjODhy/YMCM8HW0TFDckNHWUewW+kfvhin43hKtJxAw==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
	var app_UserInfo = Vue.createApp({
		data() {
			return {
				material: {
					name: "您的姓名",
					gender: "",
					birthDay: "",
					address: "您的居住地",
					introduction: "",
					phoneNumber: "",
					id: "",
					level: "",
				},
				genderOptions: {
					0: '男',
					1: '女'
				},
				levelOptions: {
					0: "一般會員",
					1: "白金會員"
				},
				profilePictureError: '',
				profilePicture: '',
				profilePictureUri: "", /* 圖片URL */
				imagePreview: "", /* 新增圖片預覽URL */
				
				originalMaterial: {}, //保存一份原始資料
				isLoggedIn: false, // 新增登录状态
				customErrors: { // 用於保存自定義錯誤訊息
					birthDay: '',
					phoneNumber: '',
					name: ''
				},
				// 相簿部分
				pictures: [],  // 存儲用戶的相簿圖片
				albumUploadError: '', // 用於保存上傳錯誤訊息
			}
		},
		computed: {
			displayGender() {
				return this.genderOptions[this.material.gender];
			},
			formattedBirthDay() {
				// 如果 `material.birthDay` 有值，切割並取日期部分
				return this.material.birthDay ? this.material.birthDay.split('T')[0] : '';
			},
			displayLevel() {
				return this.levelOptions[this.material.level];
			},
		},
		methods: {
			showModel() {									/* 顯示修改的表單 */
				this.originalMaterial = JSON.parse(JSON.stringify(this.material)); /* 創建拷貝數據 */
				$("#saveModal").modal("show");
			},
			isImage(even) {
				let file = even.target.files[0];
				if (!file) {
					this.imagePreview = '';
					this.profilePictureError = '';
				} else if (file.type.startsWith("image/")) {
					this.imagePreview = URL.createObjectURL(file);
					this.profilePictureError = '';
					this.profilePicture = file;
				} else {
					this.profilePictureError = '請傳入圖片檔'
				}
			},
			saveData() {										/* 保存按鈕的函式 */
				// alert("可以保存了")
				this.customErrors = {
					birthDay: '',
					phoneNumber: '',
					name: ''
				};
				let isValid = true;
				if (!this.validateBirthDay(this.material.birthDay)) {
					this.customErrors.birthDay = '錯誤!! 生日格式為: 西元年-月-日';
					isValid = false;
				}

				// 將電話號碼的檢查放寬，只有在非空時才進行格式驗證
				if (this.material.phoneNumber && !this.validatePhoneNumber(this.material.phoneNumber)) {
					this.customErrors.phoneNumber = '請填寫正確電話號碼! 電話號碼應該介於 10 到 20 個字元之間 ';
					isValid = false;
				}

				// 若暱稱為填寫，跳錯誤訊息
				if (!this.validateName(this.material.name)) {
					this.customErrors.name = '暱稱不能為空';
					isValid = false;
				}

				// 如果有錯誤，停止保存
				if (!isValid) {
					return;
				}

				let formData = new FormData();
				formData.append('Id', this.material.id);
				formData.append('Name', this.material.name);
				formData.append('Address', this.material.address);
				formData.append('BirthDay', this.material.birthDay);
				formData.append('Introduction', this.material.introduction);

				//PhoneNumber 的處理，允許為空
				if (this.material.phoneNumber) {
					formData.append('PhoneNumber', this.material.phoneNumber);
				}

				formData.append("ProfilePicture", this.profilePicture);

				axios.post(`/api/UserInfo/SaveData`, formData)
					.then(response => {
						console.log(response.data); alert("已儲存"); $("#saveModal").modal("hide");
						// 更新圖片 URL 來保證即時顯示新圖片
						this.profilePictureUri = `/api/UserInfo/GetPicture/${this.material.id}?t=${new Date().getTime()}`;
						this.profilePicture = null; // 重置圖片
						this.imagePreview = ""; // 清除圖片預覽
					})
					.catch(error => {
						if (error.response && error.response.status === 400 && error.response.data.errors) {
							// 從後端返回的錯誤中取得電話號碼相關的錯誤訊息
							if (error.response.data.errors.PhoneNumber) {
								this.customErrors.phoneNumber = error.response.data.errors.PhoneNumber[0];
							}
						}
						console.error(error);/*  alert("儲存錯誤.請檢查"); */
					});
			},
			fetchData() {
				/* 呼叫資料 */
				axios.get(`/api/UserInfo/GetUserinfos/${@ViewBag.UserId}`)
					.then(response => {
						this.material = response.data;
						for (let key in this.material) {
							if (this.material[key] === 'null') {
								this.material[key] = '';
							}
						}

						// 確保性別是數值類型
						if (typeof this.material.gender === 'string') {
							this.material.gender = parseInt(this.material.gender, 10);
						}
						// 初始化圖片 URL
						this.profilePictureUri = `/api/UserInfo/GetPicture/${this.material.id}?t=${new Date().getTime()}`;
						// 確認是否為本人的邏輯
						this.isLoggedIn = this.material.id === this.material.id;

						// 處理 birthDay 的格式，只保留日期部分
						if (this.material.birthDay) {
							this.material.birthDay = this.material.birthDay.split('T')[0];
						} 
						
						this.fetchUserPictures(); // 加載用戶的相簿圖片						
					})
					.catch(err => { alert(err); });
			},
			cancelChange() {							/* 取消按鈕要顯示原本的內容 */
				this.material = JSON.parse(JSON.stringify(this.originalMaterial));
				$("#saveModal").modal("hide");
			},
			validateBirthDay(dateString) {
				// 檢查生日格式是否為 YYYY-MM-DD
				return /^\d{4}-\d{2}-\d{2}$/.test(dateString);
			},
			validatePhoneNumber(phoneNumber) {
				// 檢查電話號碼是否有效 (假設台灣電話號碼格式)
				const phoneNumberRex = /^[\d\+\-\(\) ]+$/;

				return phoneNumberRex.test(phoneNumber);
			},	
			validateName(name) {
				// 檢查暱稱是否有填寫
				if (!name.trim()) {					
					return false;
				}
				this.customErrors.name = ''; // 清除之前的錯誤訊息
				return true;
			},
			// 相簿部分
			async fetchUserPictures() {  // 獲取用戶的相簿圖片
				try {
					const response = await axios.get(`/api/Profile/GetUserPictures/${this.material.id}`);
					this.pictures = response.data;
				} catch (error) {
					console.error("Failed to fetch pictures:", error);
				}
			},
			async uploadPictures(event) {  // 上傳相簿圖片
				const files = event.target.files;
				if (files.length === 0) return;

				const formData = new FormData();
				formData.append('userId', this.material.id);
				let allImagesValid = true; // 增加一個標記來檢查圖片是否有效

				for (const file of files) {
					if (!file.type.startsWith("image/")) {
						this.albumUploadError = '請上傳圖片檔案';
						allImagesValid = false;  // 如果有一個圖片無效，改成 false
						break;
					}
					formData.append('albumPictures', file);
				}
				if (!allImagesValid) return;  // 如果有"無效圖片"，則停止上傳

				try {
					const response = await axios.post(`/api/UserInfo/UploadAlbumPicture`, formData);
					this.fetchUserPictures();  // 上傳後重新加載相簿圖片
				} catch (error) {
					this.albumUploadError = '圖片上傳失敗';
					console.error("Failed to upload pictures:", error);
				}
			},
			async deletePicture(pictureId) {  // 刪除相簿圖片
				try {
					const response = await axios.delete(`/api/UserInfo/DeletePicture/${pictureId}`);
					this.fetchUserPictures();  // 刪除後重新加載相簿圖片
				} catch (error) {
					console.error("Failed to delete picture:", error);
				}
			},
		},
		mounted() {
			this.fetchData();
		},
	}).mount("#app_UserInfo");
	var app_MemberLable = Vue.createApp({
		data() {
			return {
				userId: @ViewBag.UserId,
				availableLabels: [], /* 從後端獲取所有可用標籤 */
				selectedLabels: [], /* 用戶選擇的標籤ID */
				errorMessage: null,  // 用於存儲錯誤訊息

				pictures: [],
				error: null,
			}
		},
		methods: {
			fetchAvailableLabels() {
				axios.get(`/api/LabelsApi/GetLabels`)
					.then(response => { this.availableLabels = response.data; })
					.catch(error => { console.error('獲取標籤時出錯', error); });
			},
			fetchUserLabels() {
				axios.get(`/api/MemberLabelsApi/getLabelsForUser/${this.userId}`)
					.then(response => { this.selectedLabels = response.data; })
					.catch(error => console.error("獲得標籤時出錯", error));
			},
			toggleLabel(labelId) {
				const index = this.selectedLabels.indexOf(labelId);
				if (index === -1) {
					// 如果未選中, 則添加
					this.selectedLabels.push(labelId);
				} else {
					// 如果已選中, 則移除
					this.selectedLabels.splice(index, 1);
				}
			},
			submitLabels() {
				const memberLabelDto = {
					UserId: this.userId,
					LabelIds: this.selectedLabels
				};
				axios.post(`/api/MemberLabelsApi/submitLabels`, memberLabelDto, {
					headers: {
						'Content-Type': 'application/json'
					}
				})
					.then(response => {
						console.log("標籤選取成功:", response); alert("保存成功");
						this.errorMessage = null;
						// 保存成功後更新界面或重新獲取數據
						this.fetchUserLabels();
					})
					.catch(error => {
						console.error('標籤選取時出錯', error);
						if (error.response) {
							this.errorMessage = `保存失敗：${error.response.data}`;
						} else if (error.request) {
							this.errorMessage = '未收到響應，請檢查網絡連接。';
						} else {
							this.errorMessage = `錯誤信息：${error.message}`;
						}
					});
			},
			clearSelection() {
				this.selectedLabels = [];
			},
			getLabelById(labelId) {
				return this.availableLabels.find(label => label.id === labelId);
			},
			async fetchUserPictures(userId) {
				try {
					const response = await axios.get(`/api/Profile/GetUserPictures/${userId}`);
					this.pictures = response.data;
				} catch (error) {
					if (error.response) {
						this.error = error.response.data;
					} else {
						this.error = 'Error fetching user pictures';
					}
				} finally {
				}
			},
			async deletePicture(pictureId) {
				try {
					await axios.delete(`/api/Profile/DeleteUserPicture/${pictureId}`);
					this.pictures = this.pictures.filter(pic => pic.id !== pictureId);
					Swal.fire({
						icon: 'success',
						title: 'Deleted!',
						text: 'Picture has been deleted.',
					});
				} catch (error) {
					Swal.fire({
						icon: 'error',
						title: 'Error!',
						text: 'Failed to delete user pictures.',
					});
					if (error.response) {
						this.error = error.response.data;
					} else {
						this.error = 'Error deleting picture';
					}
				}
			},
		},
		mounted() {
			this.fetchAvailableLabels();
			this.fetchUserLabels(); //User標籤
			this.fetchUserPictures(this.userId);
		},
	}).mount("#app_MemberLable");
	
</script>