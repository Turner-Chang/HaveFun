<link href="~/assets/css/profile_poststyle.css" rel="stylesheet" />

<div class="tab-pane fade show active" id="gt1" role="tabpanel" aria-labelledby="gt1-tab">
    <div id="post">
        <div class="group__bottom--area group__bottom--memberactivity">
            <div class="group__bottom--body">
                <div class="group__bottom--allmedia">
                    <div class="media-wrapper">
                        <div class="tab-content" id="myTabContent2">
                            <div class="tab-pane fade show active" id="Personal" role="tabpanel" aria-labelledby="Personal-tab">
                                @* 發送貼文 *@
                                <div v-if="displayPostForm" class="create-post mb-4">
                                    <div class="lab-inner">
                                        <div class="lab-thumb">
                                            <div class="thumb-inner">
                                                <div class="thumb-img">
                                                    <a :href="`/Profile/Index?userId=${loginUserId}`">
                                                        <img :src="loginUserPicture" alt="datting thumb">
                                                    </a>
                                                </div>
                                                <div class="thumb-content">
                                                    <h6>
                                                        <a :href="`/Profile/Index?userId=${loginUserId}`">
                                                            @* <a :href="`/Index?userId=${post.UserId}`"> *@
                                                            {{loginUserName}}
                                                        </a>
                                                    </h6>
                                                    <div class="custom-select">
                                                        <select v-model="postPrivacy">
                                                            <option value="公開貼文">公開貼文</option>
                                                            @* <option value="Private"> Private</option> *@
                                                            @* <option value="Friends"> Friends</option> *@
                                                        </select>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="lab-content">
                                            <form class="post-form">
                                                <textarea v-model="postContent" :placeholder="placeholderText" rows="3"></textarea>
                                                <div class="img-preview-container">
                                                    <img class="Post-Preview-img" :src="previewImageUrl" />
                                                    <button v-if="newPostPic" class="default-btn" @@click.prevent="removeNewPostPic">取消</button>
                                                </div>
                                                <div class="content-type">
                                                    <ul class="content-list">
                                                        @* <li class="text"><a href="#"><i class="fa-solid fa-pen-to-square"></i>Text</a></li> *@
                                                        <li class="image-video">
                                                            <div class="file-btn"><i class="fa-solid fa-camera"></i>照片</div>
                                                            <input type="file" ref="fileInput" @@change.prevent="previewPic" accept="image/*">
                                                        </li>
                                                        </li>
                                                        <li class="attach-file">
                                                            @* <div class="file-btn"><i class="fa-solid fa-link"></i>Attach File</div> *@
                                                            @* <input type="file" @@change.prevent="handleFileUpload"> *@
                                                        </li>
                                                        <li class="post-submit">
                                                            <button @@click.prevent="addPost" class="default-btn">發佈貼文</button>
                                                        </li>
                                                    </ul>
                                                </div>
                                            </form>
                                        </div>
                                    </div>
                                </div>

                                @* <a class="default-btn" asp-area="" asp-controller="Profile" asp-action="Index" asp-route-userId="16">
                                個人主頁
                                </a> *@
                                <div v-if="displayPostsSelect" class="button-container_displayPostsSelect">
                                    <button :class="{ 'active': displayPersonalPosts }" @@click="showPersonalPosts">個人貼文</button>
                                    <button :class="{ 'active': !displayPersonalPosts }" @@click="showFriendPosts">朋友貼文</button>
                                </div>

                                @* 顯示貼文 *@
                                <div id="post-container">
                                    <div v-for="post in filteredPosts" :key="post.id" class="post-item mb-4">
                                    @* 貼文內容 *@
                                    <div class="post-content">
                                        <div class="post-author">
                                            <div class="post-author-inner">
                                                <div class="author-thumb">
                                                    <a :href="`/Profile/Index?userId=${post.UserId}`">
                                                        <img alt="" :src="post.UserPicture">
                                                    </a>
                                                </div>
                                                <div class="author-details">
                                                    <h6>
                                                        @* <a :href="'Profile/Index?userId='+post.UserId"> *@
                                                        <a :href="`/Profile/Index?userId=${post.UserId}`">
                                                            {{ post.UserName }}
                                                        </a>
                                                    </h6>
                                                    <ul class="post-status">
                                                        <li class="post-privacy"><i class="icofont-world"></i>{{postPrivacy}}</li>
                                                        <li class="post-time">{{post.Time}}</li>
                                                    </ul>
                                                </div>
                                            </div>
                                            <div class="post-review-dropdown">
                                                <button type="button" id="btnMore" class="btn btn-sm dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">
                                                    <i class="fa-solid fa-ellipsis"></i>
                                                </button>
                                                <ul class="dropdown-menu">
                                                        <li v-if="displayPersonalPosts" @@click.prevent="showDelete(post)"><a class="dropdown-item">刪除貼文</a></li>
                                                        <li v-if="!displayPersonalPosts" @@click.prevent="showRat(post)"><a class="dropdown-item">檢舉貼文</a></li>
                                                </ul>
                                            </div>
                                        </div>
                                        <div class="post-description">
                                            <p>{{ post.Contents }}</p>
                                            <div v-if="post.showPostPicture">
                                                <img :src="post.Pictures" class="Post-size-img" alt="Post Picture" />
                                            </div>

                                        </div>
                                    </div>
                                    @* 貼文功能按鈕 *@
                                    <div class="post-meta">
                                        <div v-if="post.LikeCount>0" class="post-meta-top">
                                            <p>
                                                <a href="#" @@click.prevent="showLikeUserList(post)">
                                                    <i class="fa-solid fa-heart"></i>
                                                    <span>{{post.LikeCount}}</span>
                                                </a>
                                            </p>
                                            @* <p><a href="#" @@click.prevent="showCommentsAlert">Show Comments</a></p> *@
                                        </div>
                                        <div class="post-meta-bottom">
                                            <ul class="react-list">
                                                <li class="react">
                                                    <a href="#" @@click.prevent="clickLike(post)">
                                                        @* <i v-if="clickLikeOrNot(post)" class="fa-heart fa-solid"></i> *@
                                                        <i v-if="post.likedByUser" class="fa-heart fa-solid"></i>
                                                        <i v-else class="fa-heart fa-regular"></i> 喜歡
                                                    </a>
                                                <li class="react"><a href="#" @@click.prevent="commentOnPost(post)"><i class="fa-solid fa-comment"></i>留言</a></li>
                                                <li class="react"><a href="#" @@click="shareToFacebook(post)"><i class="fa-solid fa-share"></i> 分享</a></li>
                                                    
                                            </ul>
                                        </div>
                                    </div>
                                    @* 貼文回覆 *@
                                    <div v-show="post.showComments" class="comments">
                                        <ul class="lab-ul comment-list">
                                            <li class="comment" v-for="reply in post.Replies" :key="reply.Id">
                                                <div class="com-item">
                                                    <div class="com-thumb">
                                                        <a :href="`/Profile/Index?userId=${reply.UserId}`">
                                                            <img alt="" :src="reply.UserPicture">
                                                        </a>
                                                    </div>
                                                    <div class="com-content">
                                                        <div class="com-title">
                                                            <div class="com-title-meta">
                                                                <a :href="`/Profile/Index?userId=${reply.UserId}`">
                                                                    {{reply.UserName}}
                                                                </a>
                                                                <span> || {{reply.Time}}</span>
                                                            </div>
                                                            <span class="reply">
                                                                <a class="comment-reply-link" href="#" @@click.prevent="toggleNestedReplyForm(post.Id, reply.Id)"><i class="icofont-reply-all"></i>回 覆</a>
                                                            </span>
                                                        </div>
                                                        <div class="post-description">
                                                            <p>{{ reply.Content }}</p>
                                                        </div>
                                                    </div>
                                                </div>
                                                @* 回覆的回覆   *@
                                                <ul class="lab-ul comment-list">
                                                    <li class="comment" v-for="nestedReply in reply.nestedReplies" :key="nestedReply.Id">
                                                        <div class="com-thumb">
                                                            <a :href="`/Profile/Index?userId=${nestedReply.UserId}`">
                                                                <img alt="" :src="nestedReply.UserPicture">
                                                            </a>
                                                        </div>
                                                        <div class="com-content">
                                                            <div class="com-title">
                                                                <div class="com-title-meta">
                                                                    <a :href="`/Profile/Index?userId=${nestedReply.UserId}`">
                                                                        {{ nestedReply.UserName }}
                                                                    </a>
                                                                    <span> || {{nestedReply.Time}} </span>
                                                                </div>
                                                            </div>
                                                            <div class="post-description">
                                                                <p>{{ nestedReply.Content}}</p>
                                                            </div>
                                                        </div>
                                                    </li>
                                                </ul>
                                                <div v-if="reply.showNestedForm" class="nested-reply-form">
                                                    @* <input type="text" v-model="reply.nestedReplyContent" class="nested-reply-input" placeholder="Write a reply..."> *@
                                                    <textarea v-model="reply.nestedReplyContent"
                                                              :class="`nested-reply-input nested-reply-input-${reply.Id}`"
                                                              placeholder="Write a reply..."
                                                              @@keydown.enter="handleEnter"
                                                              @@blur="resetTextarea('nested-reply-input')">
                                                    </textarea>
                                                    <button class="nested-reply-submit-button" @@click.prevent="addNestedReply(post.Id, reply.Id)">回 覆</button>
                                                </div>
                                            </li>
                                        </ul>
                                        <div v-if="post.showReplyForm" class="reply-form">
                                            <textarea v-model="post.newReply"
                                                      :class="`reply-input reply-input-${post.Id}`"
                                                      placeholder="Write a reply..."
                                                      @@keydown.enter="handleEnter"
                                                      @@blur="resetTextarea('reply-input')">
                                            </textarea>
                                            <button class="btn-reply" @@click.prevent="addReply(post.Id)">貼文回覆</button>
                                        </div>
                                    </div>
                                </div>
                                    <div ref="bottomObserver" class="bottom-marker-Observer"></div> <!-- 標記元素 -->
                                    <div class="row justify-content-center">
                                        <div class="col-auto">
                                            <a v-if="displayPersonalPosts && !allUserLoaded" href="#" class="default-btn" @@click.prevent="loadMore">
                                                <span><i class="fa-solid fa-spinner"></i> Load More User Post</span>
                                            </a>
                                            <a v-if="!displayPersonalPosts && !allFriendLoaded" href="#" class="default-btn" @@click.prevent="loadMore">
                                                <span><i class="fa-solid fa-spinner"></i> Load More Friend Post</span>
                                            </a>
                                        </div>
                                    </div>
                                </div> 
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <!-- 檢舉視窗 -->
        <div v-if="showRatBox" class="ratBox-overlay">
            <div class="ratBox">
                <span>檢舉事由：</span><br>
                <select class="form-select" id="inputState" v-model="ratReason">
                    <option selected value="">CHOOSE....</option>
                    <option v-for="item in ratItems" :value="item.complaintCategoryId">{{ item.complaintCategoryName }}</option>
                </select>
                <input type="text" class="form-control" v-model="ratContent" placeholder="詳細說明..." />
                <button class="btn btn-danger" @@click="ratPost">確定</button>
                <button class="btn btn-outline-secondary" @@click="cancelRatBox">取消</button>
            </div>
        </div>
        <!-- 刪除貼文視窗 -->
        <div v-if="showDeleteBox" class="deleteBox-overlay">
            <div class="deleteBox">
                <span>確定要刪除貼文嗎？</span><br><br>
                <button class="btn btn-danger" @@click="deletePost">確定</button>
                <button class="btn btn-outline-secondary" @@click="cancleDeleteBox">取消</button>
            </div>
        </div>
        <!-- Like用戶列表模態視窗 -->
        <div v-if="showLikeUserListModal" class="likeUser-overlay">
            <div class="likeUser-content">
                @* <span class="close-button" @@click="closeLikeUserListModal">&times;</span> *@
                <h4>有誰喜歡這篇貼文</h4>
                <ul class="likeUser-list">
                    <li v-for="user in LikeUserList" :key="user.userId">
                        <a :href="`/Profile/Index?userId=${user.userId}`">
                            <img :src="user.userPicture" alt="user picture">
                            {{ user.userName }}
                        </a>
                    </li>
                </ul>         
                <button class="likeUser-close-button" @@click="closeLikeUserListModal">關閉</button>
            </div>
        </div>
    </div>
</div>

<script src="https://unpkg.com/vue@3/dist/vue.global.js"></script>
<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
<script>
    const post = Vue.createApp({
        data() {
            return {
                postContent: '',
                placeholderText: '',
                newPostPic: null,       // 上傳發文圖片
                previewImageUrl: null,  // 上傳發文圖片預覽
                postPrivacy: '公開貼文',
                posts: [],
                userCurrentPage: 1,     // User Post表示當前頁碼
                friendCurrentPage: 1,     // Friend Post表示當前頁碼
                pageSize: 5,        // 每次增加顯示貼文筆數
                allUserLoaded: false,   // 表示User貼文已加載完畢
                allFriendLoaded: false,   // 表示Friend貼文已加載完畢
                showUserId: @ViewBag.ShowUserId, // 指定顯示的UserId
                loginUserId: @ViewBag.UserId, // 使用者ID
                loginUserName: '',
                loginUserPicture: '',
                userInfo: [],       // 使用者資料
                showRatBox: false, // 顯示檢舉視窗
                ratContent: "",
                ratReason: "",
                ratItems: [], // 檢舉項目
                ratPostId: null, // 檢舉貼文Id
                showDeleteBox: false, // 顯示刪除視窗
                deletePostId: null,
                showDeleteBtn: false,
                LikeUserList: [],             // LikeUser清單
                showLikeUserListModal: false, // 顯示LikeUser清單
                displayPostForm:true,     // 發文區塊
                displayPostsSelect: true, // 個人/朋友 選項
                displayPersonalPosts: true, // 個人貼文
                FriendPostList: [], // 朋友列表
                isInitialLoad: true, // 是否為初次加載
                observer: null // Intersection Observer 的實例
            };
        },
        computed: {
            postsWithLikeStatus() {
                return this.posts.map(post => {
                    // console.log('postsWithLikeStatus:', post);
                    // console.log("post.LikeUserList", post.LikeUserList);
                    const userIds = post.Like.map(like => like.userId);
                    post.likedByUser = userIds.includes(this.loginUserId);
                    return post;
                });
            },
            filteredPosts() {
                if (this.showUserId == this.loginUserId) {
                    this.displayPostsSelect = true;
                    if (this.displayPersonalPosts) {
                        // 顯示個人貼文
                        return this.postsWithLikeStatus.filter(post => {
                            // console.log('post.UserId:', post.UserId);
                            return post.UserId === this.loginUserId;
                        });
                    } else {
                        // 顯示朋友貼文
                        return this.postsWithLikeStatus.filter(post => {
                            // console.log('post.UserId:', post.UserId);
                            return this.FriendPostList.includes(post.UserId.toString());
                        });
                    }
                }
                this.displayPostForm = false;
                this.displayPostsSelect = false;
                return this.postsWithLikeStatus;
            },
        },
        methods: {
            // 登入者資料
            async getUserInfo() {
                axios.post(`/api/Profile/GetUserInfor/${this.loginUserId}`)
                    .then(response => {
                        // console.log("getUserInfo response:", response.data);
                        this.userInfo = response.data;
                        this.setUserInfo();
                    })
                    .catch(error => {
                        console.error('Error getUserInfo:', error);
                    });
            },

            // 設置基本資料
            setUserInfo() {
                this.loginUserName = this.userInfo[0].name;
                this.loginUserPicture = this.userInfo[0].profilePicture
                this.placeholderText = `現在在想些甚麼呢, ${this.userInfo[0].name}?`;
            },

            // 設定 監控資訊
            createIntersectionObserver() {
                const options = {
                    root: null, // 使用整個頁面作為 root
                    rootMargin: '0px',
                    threshold: 1.0
                };

                this.observer = new IntersectionObserver((entries) => {
                    entries.forEach(entry => {
                        if (entry.isIntersecting && !this.isInitialLoad) {
                            // console.log('到達底部, Call loadMore');
                            this.loadMore();
                        }
                    });
                }, options);

                this.observer.observe(this.$refs.bottomObserver); // 觀察標記元素
            },

            // 出載初始Post
            async loadInitialPosts() {
                try {
                    await this.getPosts(false); // 加載個人貼文
                    await this.getPosts(true); // 加載朋友貼文
                    this.isInitialLoad = false;
                } catch (error) {
                    console.error('Error loading initial posts:', error);
                }
            },

            // 查詢貼文
            async getPosts(queryFriend) {
                // 如果所有貼文都loading完畢，則不進入此方法
                if ( this.allUserLoaded && this.allFriendLoaded) return;

                try {
                    const queryId = this.showUserId ? this.showUserId : this.loginUserId;
                    const response = await axios.get(`/api/Profile/GetPostsList/${queryId}`, {
                        params: {
                            // page: this.currentPage,
                            page: queryFriend ? this.friendCurrentPage :this.userCurrentPage ,
                            pageSize: this.pageSize,
                            queryFriend: queryFriend
                        }
                    });

                    if (this.FriendPostList.length === 0) {
                        this.FriendPostList = response.data[0]?.freindList || []
                    }

                    const newPosts = response.data.map(post => ({
                        Id: post.id,
                        UserId: post.userId,
                        UserName: post.userName,
                        UserPicture: post.userPicture,
                        Contents: post.contents,
                        Time: post.time,
                        Pictures: post.picturePath,
                        Like: post.like,
                        LikeUserList: post.likeUserList,
                        LikeCount: post.likeCount,
                        Replies: (post.replies || []).map(reply => ({
                            Id: reply.id,
                            UserId: reply.userId,
                            UserName: reply.userName,
                            UserPicture: reply.userPicture,
                            PostId: reply.postId,
                            ParentCommentId: reply.parentCommentId,
                            Content: reply.contents,
                            Time: reply.time,
                            nestedReplies: (reply.nestedReplies || []).map(nestedReply => ({
                                Id: nestedReply.id,
                                UserId: nestedReply.userId,
                                UserName: nestedReply.userName,
                                UserPicture: nestedReply.userPicture,
                                PostId: nestedReply.postId,
                                ParentCommentId: nestedReply.parentCommentId,
                                Content: nestedReply.contents,
                                Time: nestedReply.time
                            })),
                            showNestedForm: false,
                            nestedReplyContent: ''
                        })),
                        showPostPicture: post.picturePath ? true : false,
                        showComments: false,
                        showReplyForm: false,
                        newReply: ''
                    }));

                    // 當回傳的貼文數，小於設定顯示的筆數，表示貼文已加載完畢
                    if (newPosts.length < this.pageSize) {
                        queryFriend ? this.allFriendLoaded = true : this.allUserLoaded = true
                    }

                    this.posts = [...this.posts, ...newPosts]; // 將回傳的貼文合併到this.posts
                    queryFriend ? this.friendCurrentPage += 1 : this.userCurrentPage += 1;
                    // this.currentPage += 1; 
                } catch (error) {
                    console.error('Error getPosts:', error);
                } 
            },

            loadMore() {
                let query = this.displayPersonalPosts? false :true
                this.getPosts(query);
            },

            // 新增貼文
            async addPost() {
                if (this.postContent.trim() === '') {
                    alert('貼文不可空白');
                    return;
                } else if (this.postContent.trim().length > 2000) {
                    alert('貼文字數不可超過2000字');
                    return;
                }

                const newPost = new FormData();
                newPost.append('UserId', this.loginUserId);
                newPost.append('UserName', this.userName);
                newPost.append('Contents', this.postContent);
                if (this.newPostPic) {
                    newPost.append('Pictures', this.newPostPic);
                }

                try {
                    const response = await axios.post('/api/Profile/AddPost', newPost, {
                        Headers: {
                            'Content-Type': 'multipart/form-data'
                        }
                    });
                    const createdPost = response.data;
                    this.posts.unshift({
                        Id: createdPost.id,
                        UserId: createdPost.userId,
                        UserName: createdPost.userName,
                        UserPicture: createdPost.userPicture,
                        Contents: createdPost.contents,
                        Time: createdPost.time,
                        Pictures: createdPost.picturePath,
                        Like: createdPost.like || [],
                        LikeUserList: createdPost.likeUserList || [],
                        LikeCount: createdPost.likeCount,
                        Replies: createdPost.replies || [],
                        showPostPicture: createdPost.picturePath ? true : false,
                        showComments: false,
                        showReplyForm: false,
                        newReply: ''
                    });
                    this.postContent = '';
                    this.newPostPic = null;
                    this.removeNewPostPic();
                } catch (error) {
                    console.error('Error addPost:', error);
                }
            },

            // 新增貼文圖片
            previewPic(event) {
                const allowType = "image.*";
                let file = event.target.files[0];
                if (file && file.type.match(allowType)) {
                    var reader = new FileReader();
                    reader.onload = (e) => {
                        let blob = new Blob([e.target.result], { type: "image/jpeg" });
                        let uriCreator = window.URL || window.webkitURL;
                        this.previewImageUrl = uriCreator.createObjectURL(blob);
                    };
                    reader.readAsArrayBuffer(file);
                    this.newPostPic = file;
                } else {
                    this.newPostPic = null;
                    this.previewImageUrl = null;
                }
            },

            // 移除貼文圖片
            removeNewPostPic() {
                this.newPostPic = null;
                this.previewImageUrl = null;
                this.$refs.fileInput.value = ""; // 重置文件输入的值
            },

            // 貼文回覆
            async addReply(PostId) {
                const post = this.posts.find(p => p.Id === PostId);

                if (post.newReply.trim() == '') {
                    alert('回覆不可空白');
                    return;
                } else if (post.newReply.trim().length > 280) {
                    alert('回覆字數不可超過280字');
                    return;
                }

                if (post) {
                    const newReply = {
                        UserId: this.loginUserId,
                        UserName: this.loginUserName,
                        PostId: PostId,
                        Contents: post.newReply,
                        Time: '',
                        ParentCommentId: null, // 貼文回覆ID
                        NestedReplies: []
                    };

                    try {
                        const response = await axios.post('/api/Profile/AddComment', newReply);
                        const createdReply = response.data;

                        post.Replies.push({
                            Id: createdReply.id,
                            UserId: createdReply.userId,
                            UserName: createdReply.userName,
                            UserPicture: createdReply.userPicture,
                            PostId: createdReply.postId,
                            ParentCommentId: createdReply.parentCommentId,
                            Content: createdReply.contents,
                            Time: createdReply.time,
                            showNestedForm: false,
                            nestedReplyContent: '',
                            nestedReplies: []
                        });
                        post.newReply = '';
                        post.showComments = true;
                        this.resetTextarea('reply-input'); // 重置 newReply textarea高度
                    } catch (error) {
                        console.error('Error addReply:', error);
                    }
                }
            },

            // 貼文回覆的回覆
            async addNestedReply(PostId, replyId) {
                const post = this.posts.find(p => p.Id === PostId);
                if (post) {
                    const reply = post.Replies.find(r => r.Id === replyId);

                    if (reply.nestedReplyContent.trim() == '') {
                        alert('回覆不可空白');
                        return;
                    } else if (reply.nestedReplyContent.trim().length > 280) {
                        alert('回覆字數不可超過280字');
                        return;
                    }

                    if (reply && reply.nestedReplyContent.trim()) {
                        const newNestedReply = {
                            UserId: this.loginUserId,
                            UserName: this.loginUserName,
                            PostId: PostId,
                            Contents: reply.nestedReplyContent,
                            Time: '',
                            ParentCommentId: replyId, // 貼文回覆ID
                            NestedReplies: []
                        };

                        try {
                            const response = await axios.post('/api/Profile/AddComment', newNestedReply);
                            const createdNestedReply = response.data;

                            reply.nestedReplies.push({
                                Id: createdNestedReply.id,
                                UserId: createdNestedReply.userId,
                                UserName: createdNestedReply.userName,
                                UserPicture: createdNestedReply.userPicture,
                                PostId: createdNestedReply.postId,
                                ParentCommentId: createdNestedReply.parentCommentId,
                                Content: createdNestedReply.contents,
                                Time: createdNestedReply.time,
                                showNestedForm: false,
                                nestedReplyContent: ''
                            });
                            reply.nestedReplyContent = '';
                            reply.showNestedForm = false;
                            this.resetTextarea('nested-reply-input'); // 重置 newReply textarea高度
                        } catch (error) {
                            console.error('Error addNestedReply:', error);
                        }
                    }
                }
            },

            // Like 圖示變化
            clickLikeOrNot(post) {
                // console.log('clickLikeOrNot')
                return post.likedByUser || false;
            },

            // 貼文Like
            clickLike(post) {
                // console.log('clickLike')
                const Like = event.target;
                let like = {
                    "PostId": post.Id,
                    "UserId": this.loginUserId
                };
                axios.post('/api/Profile/AddLike', like)
                    .then(response => response.data)
                    .then(data => {
                        console.log(data);
                        if (data.state === 'CancelLike') {
                            post.likedByUser = false;
                            post.LikeCount-= 1;
                            post.LikeUserList = post.LikeUserList.filter(user => user.userId !== data.userId); // 排除取消Like者
                            // Like.firstChild.classList.add('fa-regular');
                            // Like.firstChild.classList.remove('fa-solid');
                        } else if (data.state === 'Like') {
                            post.likedByUser = true;
                            post.LikeCount+= 1;
                            post.LikeUserList.push({
                                "userId": this.loginUserId,
                                "userName": this.loginUserName,
                                "userPicture": data.userPicture
                            });
                            // Like.firstChild.classList.remove('fa-regular');
                            // Like.firstChild.classList.add('fa-solid');
                        }
                    })
                    .catch(error => {
                        console.log('Error clickLike:', error);
                    });
            },

            // 顯示LikeUserList
            showLikeUserList(post) {
                this.LikeUserList = post.LikeUserList;
                this.showLikeUserListModal = true;
            },

            // 關閉LikeUserList
            closeLikeUserListModal() {
                this.showLikeUserListModal = false;
            },

            shareToFacebook(post) {
                event.preventDefault();
                const shareUrl = `https://www.facebook.com/share.php?u=${window.location.origin + '/post/' + post.postId}&quote=${post.contents}`;
                window.open(shareUrl, 'facebook-share-dialog', 'width=800,height=600');
            },

            // 取得檢舉項目
            getRatItemsList() {
                axios.get('/api/Profile/GetComplaintCategory')
                    .then(response => {
                        this.ratItems = response.data;
                    })
                    .catch(error => {
                        console.error('Error getRatItemsList:', error);
                    });
            },

            // 顯示檢舉視窗
            showRat(post) {
                this.showRatBox = true;
                this.ratPostId = post.Id; // 保存檢舉貼文ID
                this.$nextTick(() => {
                    document.querySelector('.ratBox-overlay').focus();
                });
            },

            // 檢舉貼文
            ratPost() {
                let ratpost = {
                    "PostId": this.ratPostId,
                    "UserId": this.loginUserId,
                    "ReportItems": this.ratReason,
                    "Reason": this.ratContent,
                    "ProcessingStstus": 0
                };

                if (ratpost.ReportItems == 0) {
                    alert("請選擇檢舉原因")
                    return
                }

                axios.post('/api/Profile/RatPostReview', ratpost)
                    .then(response => {
                        // console.log(response.data);
                        // 清空檢舉表單並關閉檢舉視窗
                        this.resetRatBox();
                    })
                    .catch(error => {
                        console.error('Error ratPost:', error);
                    });
            },

            // 取消檢舉
            cancelRatBox() {
                this.showRatBox = !this.showRatBox;
            },

            // 檢舉後清空資料
            resetRatBox() {
                this.ratReason = "";
                this.ratContent = "";
                this.ratPostId = null;
                this.showRatBox = false;
            },

            // 顯示刪除視窗
            showDelete(post) {
                this.deletePostId = post.Id; // 保存刪除貼文ID
                this.showDeleteBox = true;
            },

            // 刪除貼文
            deletePost() {
                axios.put(`/api/Profile/Unpost/${this.deletePostId}`)
                    .then(response => {
                        // console.log(response.data);
                        this.posts = this.posts.filter(p => p.Id !== this.deletePostId);
                        this.showDeleteBox = false;
                        this.deletePostId = null;
                        // this.getPostsList(this.loginUserId);
                    })
                    .catch(error => {
                        console.error('Error deletePost:', error);
                    });
            },

            // 取消刪除
            cancleDeleteBox() {
                this.postToDelete = null;
                this.showDeleteBox = false;
            },

            // 顯示/隱藏 回覆內容與輸入框
            commentOnPost(post) {
                post.showReplyForm = !post.showReplyForm;
                post.showComments = post.showReplyForm;

                this.$nextTick(() => {
                    const textarea = document.querySelector(`.reply-input-${post.Id}`);
                    if (textarea) {
                        textarea.focus(); // 聚焦到 reply-input
                    }
                });
            },

            // 顯示/隱藏 貼文回覆的回覆輸入框
            toggleNestedReplyForm(PostId, replyId) {
                const post = this.posts.find(p => p.Id === PostId);
                if (post) {
                    const reply = post.Replies.find(r => r.Id === replyId);
                    if (reply) {
                        reply.showNestedForm = !reply.showNestedForm;
                    }
                }

                this.$nextTick(() => {
                    const textarea = document.querySelector(`.nested-reply-input-${replyId}`)
                    if (textarea) {
                        textarea.focus(); // 聚焦到 nested-reply-input
                    }
                });
            },

            // 顯示個人貼文
            showPersonalPosts() {
                this.displayPersonalPosts = true;
            },

            // 顯示朋友貼文
            showFriendPosts() {
                this.displayPersonalPosts = false;
            },

            // 調整高度
            autoResize(event) {
                const textarea = event.target;
                textarea.style.height = 'auto'; // 設定行高自動依內文調整
                const scrollHeight = textarea.scrollHeight;
                textarea.style.height = `${Math.min(scrollHeight, 72)}px`; // 設定行高最多三行(一行24px)、Math.min(a,b) a<b return a 、a>b return b
            },

            // Enter事件
            handleEnter(event) {
                const textarea = event.target;
                if (event.key === 'Enter') {
                    event.preventDefault();
                    const start = textarea.selectionStart;
                    const end = textarea.selectionEnd;
                    const value = textarea.value;
                    textarea.value = value.substring(0, start) + '\n' + value.substring(end);
                    textarea.selectionStart = textarea.selectionEnd = start + 1;
                    this.autoResize(event); // 调整高度
                }
            },

            // 重置高度
            resetTextarea(name) {
                const textarea = document.querySelector(`.${name}`);
                textarea.value = "";
                textarea.style.height = '24px'; // 初始化原始高度
            }
        },
        mounted() {
            this.getUserInfo();
            this.$nextTick(() => {
                this.createIntersectionObserver(); // 初次加載完成後創建 Intersection Observer
            });
            this.loadInitialPosts(); // 加載初始的貼文
            this.getRatItemsList();
            
        },

        beforeUnmount() {
            if (this.observer) {
                this.observer.disconnect(); // 在組件銷毀前取消觀察
            }
        }
    }).mount('#post');
</script>
